import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.util.*;

public class Node extends Thread{
	private int id;
	private Coordinate coord; //coordinate of the node in the Unite-Square Area
	private Float radius, prob;
	private int locations;
	private int energy, en_send, en_rec, en_sign;
	private int rand; //randomic int generated by hypervisor for RED protocol
	private Hypervisor parent;
	private ArrayList<Node> neigh = new ArrayList<Node>();
	private ArrayList<LocationClaim> messages =new ArrayList<LocationClaim>();
    private Map<Integer, Coordinate> m = new HashMap<Integer, Coordinate>(); //contains the map of the routed nodes coordinate
	private static String protocol;
	private static boolean foundClone=false;
	private int sent_messages=0;
	private int received_messages=0;
	private int sign_done=0;
	
	public static int cloni=0;	//da togliere
	public Node(){}
	
	public Node(int cont_id, Coordinate coo_in, Float r, Float p, Integer g, Integer e,
			Integer e_send, Integer e_rec, Integer e_sign, Hypervisor par) {
		id= cont_id;		//the ID for the node
		coord= coo_in;		//coordinates of the node
		radius= r;			//communication radius of the node
		prob=p;				//Probability for a neighbour node to process a location claim
		locations=g;		//number of destination location
		energy=e;			//Total energy for the node
		en_send= e_send;	//Energy spent for sending a message
		en_rec= e_rec;		//Energy spent for receiving a message
		en_sign= e_sign;	//Energy for the signature of a message
		parent=par; 		//refer to hypervisor
	}
	
	public int getNodeId(){
		return id;
	}
	
	public boolean setRand(int x){
		rand=x;
		return true;
	}
	
	public Coordinate getCoord(){
		return coord;
	}
	
	public static void setProtocol(String s){
			protocol=s;
	}
	
	public static boolean getFoundClone(){
		return foundClone;
	}
	
	public static void setFoundClone(boolean fc){
		System.out.println("foundclone=false");
		foundClone=fc;
	}
	
	public void insertNeigh(Node n){
		neigh.add(n);
		//System.out.println(this.getNodeId()+ " ha come vicino il nodo "+n.getNodeId());
	}
	
	public void clone(Node fromClone){
		id= fromClone.id;
		radius= fromClone.radius;
		prob= fromClone.prob;
		locations= fromClone.locations;
		energy= fromClone.energy;
		en_send= fromClone.en_send;
		en_rec= fromClone.en_rec;
		en_sign= fromClone.en_sign;
		parent= fromClone.parent;
	}
	
	public void setCoordinate(Coordinate cor){
		coord=cor;
	}
	
	public synchronized ArrayList<LocationClaim> getMessages(){
		return messages;
	}
	
	public synchronized Map<Integer,Coordinate> getM(){
		return m;
	}
	
	public synchronized int final_energy(){
		return energy;
	}
	
	public synchronized int getSent(){
		return sent_messages;
	}
	
	public synchronized int getRec(){
		return received_messages;
	}
	
	public synchronized int getSign(){
		return sign_done;
	}
	
	public void sendLC(LocationClaim mess){
			synchronized(messages){
				messages.add(mess);
				messages.notifyAll();
			}
	}
	
	public synchronized void receiveLC(LocationClaim mess){	//receive the location claim for the first time
		if(!foundClone){	//if we have found the clone, don't proceed
			System.out.println(this.getNodeId()+ " receive message of claim location from "+ mess.getID());
			if(Math.random()<=(1-prob)){
				System.out.println("ignore"); //ignore the message
			}
			else{ //forward the message
				forward(mess);
			}
		}	
	}
	
	public synchronized void receiveLCForw(LocationClaim mess){	//receive the location claim in order to forwarding it
		if(!foundClone){	//if we have found the clone, don't proceed
			System.out.println(this.getNodeId()+ " receive message forwarded");
			if(protocol.equals("LSM")){	//in LSM, we have to control in every step if the clone is present
				if(energy>=en_sign){	//control if we have enough energy to verify the signature of the message
					energy-=en_sign;
					sign_done++;
					Coordinate test=m.get(mess.getID());
					if(test!=null){	//message ID already present
						System.out.println("Già presente");
						if(!test.equals(mess.getCoord())){	//same id, different coordinates = CLONE!
							System.out.println("CLONE!");
							founded_clone();
						}
						else forw(mess);	//forw,non forward!
					}
					else{	//message ID not present
						System.out.println("Nodo "+this.getNodeId()+ "salva in hash "+ mess.getID()+ ", coordinate "+mess.getCoord().getX()+ " "+mess.getCoord().getY());
						m.put(mess.getID(), mess.getCoord());
						forw(mess);	//forw,non forward
					}
				}
			}
			if(protocol.equals("RED")){	//in RED, we only have to forward the message
				forw(mess);
			}
		}
	}
	
	public synchronized void forward(LocationClaim message){
		if(!foundClone){
			System.out.println(protocol);
			//the forwarding is different according to the protocol implemented
			if(protocol.equals("LSM")){
				int i=0;
				while(i<locations){	//sent #=locations number of messages
					System.out.println("Location "+i+ "nodo "+id);
					Double x= ((Math.random()*99)/100);
					Double y= ((Math.random()*99)/100);
					Coordinate dest= new Coordinate(x,y);
					//for every i=location g, clone the original message, changing only the destination coordinates
					LocationClaim mex_i=new LocationClaim();
					mex_i.clone(message);
					mex_i.setDestination(dest);
					forw(mex_i);
					i++;
				}
			}
			if(protocol.equals("RED")){
				try {
					MessageDigest md = MessageDigest.getInstance("MD5");	//hash function implements Java.Security protocol MD5
					for(int i=0;i<locations;i++){	//sent #=locations number of messages
						md.reset();
						md.update((byte)(message.getID()+rand+i));	//input: NodeID+randomNumber+g(forwarding iteration)
						byte[] digest = md.digest();	//calculate
						String x_s="0.", y_s="0.";
						for(int ix=0;ix<(digest.length/2);ix++)
							x_s+=Math.abs(digest[ix]);
						for(int iy=(digest.length/2);iy<digest.length;iy++)
							y_s+=Math.abs(digest[iy]);
						Double x= Double.parseDouble(x_s);	//x coordinate
						Double y= Double.parseDouble(y_s);	//y coordinate
						System.out.println(x+" "+y);
						Coordinate dest=new Coordinate(x,y);
						//for every i=location g, clone the original message, changing only the destination coordinates
						LocationClaim mex_i= new LocationClaim();
						mex_i.clone(message);
						mex_i.setDestination(dest);
						forw(mex_i);
					}
				}catch (NoSuchAlgorithmException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
			}	
		}
	}
	
	public void forw(LocationClaim message){
		//find the closer node to the destination
		Node closer= this;
		System.out.println("closer before= "+this.getNodeId());
		Double distance_min= closer.getCoord().distance(message.getDestination());
		for(int i=0;i<neigh.size();i++){
			Double newdistance=neigh.get(i).getCoord().distance(message.getDestination());	//distance node_neighbor[i]-destination coordinates
			if(newdistance<distance_min){
				closer= neigh.get(i);
				distance_min= newdistance;
			}
		}
		System.out.println("closer after= "+closer.getNodeId());
		
		if(closer!=this){ //there is a node closer to the destination
			if(!message.getForw())	//useless if the message is already forwarded (getForw==true!)
				message.setForw(true);	
			if(energy>=en_send){	//control if we have enough energy to send the message
				System.out.println(this.getNodeId()+" forward to " +closer.getNodeId());
				energy-=en_send;
				sent_messages++;
				closer.sendLC(message);
			}
		}
		else{	//this is the closer node to the destination --> this is the final receiver
			System.out.println("Save here!");
			if(energy>=en_sign){	//control if we have enough energy to verify the signature of the message
				energy-=en_sign;
				sign_done++;
				Coordinate test=m.get(message.getID());
				if(test!=null){	//message ID already present
					System.out.println("Già presente");
					if(!test.equals(message.getCoord())){	//same id, different coordinates = CLONE!
						founded_clone();
					}
				}
				else{	//message ID not present
					System.out.println("Nodo "+this.getNodeId()+ "salva in hash "+ message.getID()+ ", coordinate "+message.getCoord().getX()+ " "+message.getCoord().getY());
					m.put(message.getID(), message.getCoord());
				}
			}
		}
	}
	
	public void founded_clone(){
		//System.out.println("CLONE" + message.getID());
		cloni++;	//test per contare i cloni trovati in 100 cicli
		foundClone=true;	//static field, flag for the hypervisor
		System.out.println("foundclone=true");
		synchronized(parent){
			parent.notify();
		}
		synchronized(messages){
			messages.notifyAll();
		}
	}
		
	public void run(){
		LocationClaim message= new LocationClaim(id, coord);	//create a LCMessage with id and coordinates of the node
		//the node send broadcast to its neighbors the locationclaim message
		for(int i=0;i<neigh.size();i++){
			if(energy>=en_send){	//control if we have enough energy to send the message
				energy-=en_send;
				sent_messages++;
				neigh.get(i).sendLC(message);
			}
		}
		
		LocationClaim mex=null;
		try {
			while(!foundClone){
				synchronized(messages){
					while(messages.isEmpty()){
						System.out.println("Empty LOLOLOLOLOLOLOLOLOL?");
						messages.wait();
					}	//exit from the wait status thanks to a notify
					
					if(energy>=en_rec){	//control if we have enough energy to receive the message
						energy-=en_rec;
						received_messages++;
						mex= messages.remove(0);
					}
				}
				
				if(mex!=null){	//if we don't have energy to receive, mex=null!
					if(!mex.getForw())
						receiveLC(mex);
					else
						receiveLCForw(mex);
				}
			}
		}catch (InterruptedException e) {
			// TODO Auto-generated catch block
			System.out.println("Interrotto");
			//messages.clear();
			return;
		}
	}
}
